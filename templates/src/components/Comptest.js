"use strict";import React, { PropTypes, Component } from 'react';import { Alert, Panel, Label, Row, Col, Input } from 'react-bootstrap';import { WcTable, WcTooltip, AutoComplete, SmartInput, SplitLine, DynKVInput } from 'jing_react_components';export default class Comptest extends Component {    constructor(props, context) {        super(props, context);        this.state = {            datas: [],            alertVisible: false,            header:{                dataheader:[                    {key:"id",title:"序号",sort:true,width:200},                    {key:"user",title:"账号",sort:true,width:100},                    {key:"name",title:"名称",width:100},                    {key:"hello",title:"你好",width:100},                    {key:"world",title:"世界",width:500}                ]            }        };    }        handleFileChange(e){        e.preventDefault();        createFileForm({name: filename, value: filevalue},{a: 1, picType: 1},"http://backend.wacaiyun.com/pic/upload", "post");     }        handleAlertDismiss(){        this.setState({alertVisible: false});    }        handleRowDClick(row){        console.log(row);    }        handleSubmit(e){        e.stopPropagation();        this.setState({alertVisible: true});    }        handleAutoCompleteSelect(e){        console.log(e);    }        render(){        let div = <div><p>Number of grid columns for the panes if horizontally positioned</p><p>This accepts either a single width or a mapping of size to width. If not specified, it will be treated as styleMaps.GRID_COLUMNS minus tabWidth.</p></div>;        let datas = [{url:'/images/bg.jpg',width:0,height:0},{url:'/images/bg.jpg',width:0,height:0},{url:'/images/bg.jpg',width:0,height:0},{url:'/images/bg.jpg',width:0,height:0}];                let iframe;        if (this.state.alertVisible) {            iframe = (                <Alert bsStyle="danger" onDismiss={this.handleAlertDismiss}>                    <iframe id="id_iframe" name="id_iframe" style={{width: "100%", height: "100%", border: 0}}></iframe>                </Alert>            );        }else{            iframe = <iframe id="id_iframe" name="id_iframe" style={{display: "none"}}></iframe>;        }                let data1 = [            {key: "11541221515212121212"},            {key: "24551310325198491161"},            {key: "13198451561651503201"},            {key: "41561915615150561311"},            {key: "15619062165160356161"},            {key: "00954515649856115615"},            {key: "79651655614564104516"},            {key: "89841561561156156133"}        ];        let data3 = {            url: "/testAuto",            method: "post",            length: 10        };        let resolver = {            // 时间解析器。输出两个对象starttime，endtime，格式为YYYY-MM-DD，且endtime要晚于starttime。            // 例如在输入框内输入2013-01-01和2015-01-01。搜索条件会变成{starttime: "2013-01-01", endtime: "2013-05-01"}，如果只输入一个时间类型的值，就只匹配第一个时间starttime对象            date:[{out: "starttime", format: /^\d{4}-\d{2}-\d{2}$/ },{out: "endtime", format: /^\d{4}-\d{2}-\d{2}$/ , later: "starttime"}],            // 多选对象解析器。输出三个对象user，address，worker。            // 例如在输入框内输入了张三，李四，湖北，姑姑。搜索条件会变成{user: ["张三","李四"], address:["湖北"], worker:[1]}            enum:[{out: "user", options: ["张三","李四", "王五"]},{out: "address", options: ["浙江","湖北", "上海"]}, {out: "worker", type: "object", options: [{value: 1, label: "姑姑"}, {value: 2, label: "过儿"}]}],            // 单选对象解析器。输出两个对象number，status。            // 例如输入120,121,在线。搜索条件会变成{number: 121, status: "在线"}            unique:[{out: "number", options: ["120","121", "122"]}, {out: "status", type: "object", options: [{value: 1, label: "在线"}, {value: 2, label: "离线"}]}],            // 数字对象解析器。输出两个对象age，price。            // 例如输入50, 110.30。搜索条件会变成{age: 50, price: 110.30}            number:[{out: "age", min: 0, max: 100 }, {out: "price", min: 49, max: 149 }],            // 字符对象解析器。输出四个对象name， phone，orderid，id。            // 例如输入andy, 13512345678, 687592, 452654198812169876。搜索条件即为{name: "andy", phone: "13512345678", orderid: "687592", id: "452654198812169876"}            string:[{out: "name", format: /^\w{2,4}$/}, {out: "phone", format: /^\d{11}$/}, {out: "orderid", format: /^\d{5,10}$/}, {out: "id", format: /^\d{18}$/}],            // 默认对象解析器。以上所有不被匹配的数据项将被匹配到desc属性上。但值匹配最后一个。            def: {out: "desc"}        };        let handleSearch = function(value){            console.log(value);        }        let handleKVInputChange = function(kvs){            console.log(kvs);        }        return (            <div className="container">                <Panel header = '当前位置： 组件测试' bsStyle='info'>                    <SplitLine title="自动完成输入[远程]"/>                    <Row><AutoComplete label="demo:" datas={data1} itemValue="key" wxs={3} onSelect={this.handleAutoCompleteSelect.bind(this)}/></Row>                    <SplitLine title="自动完成输入[远程]"/>                    <Row><AutoComplete label="demo:" datas={data3} wxs={3} itemValue="id" itemLabel="user"  onSelect={this.handleAutoCompleteSelect.bind(this)}/></Row>                    <SplitLine title="智能输入搜索"/>                    <Row><SmartInput label="demo:" wxs={10} resolver={resolver} onSearch={handleSearch}/></Row>                    <SplitLine title="动态输入"/>                    <Row><DynKVInput label="demo:" type="object" onKVInputChange={handleKVInputChange}/></Row>                    <SplitLine title="表格组件[服务端分页]"/>                    <WcTable datas="/users" method="post" header={this.state.header} pagelist={[10,20,30,40,50]} onDoubleClick={this.handleRowDClick.bind(this)} rownumbers checkbox/>                </Panel>            </div>        );    }    }